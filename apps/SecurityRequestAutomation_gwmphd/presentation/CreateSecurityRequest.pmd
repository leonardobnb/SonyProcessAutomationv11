{
  "id": "CreateSecurityRequest",
  "endPoints": [
    {
      "_comment": "endpoint que devuelve los workers en función de la busqueda que haga el usuario, no siendo invocado si el usuario no ha escrito nada, para evitar problemas de rendimiento",
      "_comment2": "SELECT fullName AS descriptor, cf_ZCFESIWorkerGlobalID AS globalid, workdayID AS id, managementLevel_PrimaryPosition FROM workersForHCMReporting(dataSourceFilter=allActiveWorkers) WHERE managementLevel_PrimaryPosition is not empty AND (fullName CONTAINS peric OR employeeID CONTAINS peric OR cf_ZCF_ToText_Worker_GlobalIDValue CONTAINS peric)",
      "name": "workerSearch",
      "url": "<% 'https://api.workday.com/wql/v1/data?query=SELECT%20fullName%20AS%20descriptor%2C%20cf_ZCFESIWorkerGlobalID%20AS%20globalid%2C%20workdayID%20AS%20id%2C%20managementLevel_PrimaryPosition%20FROM%20workersForHCMReporting(dataSourceFilter%3DallActiveWorkers)%20WHERE%20managementLevel_PrimaryPosition%20is%20not%20empty%20AND%20(fullName%20CONTAINS%20%22'+ instanceListQuery +'%22%20OR%20employeeID%20CONTAINS%20%22'+instanceListQuery+'%22%20OR%20cf_ZCF_ToText_Worker_GlobalIDValue%20CONTAINS%20%22'+instanceListQuery+'%22)' %>",
      "exclude": "<% empty instanceListQuery %>",
      "authType": "sso",
      "deferred": true
    },
    {
      "_comment": "endpoint que devuelve los workers en función de la busqueda que haga el usuario, no siendo invocado si el usuario no ha escrito nada, para evitar problemas de rendimiento",
      "_comment2": "SELECT fullName AS descriptor, cf_ZCFESIWorkerGlobalID AS globalid, workdayID AS id, managementLevel_PrimaryPosition FROM workersForHCMReporting(dataSourceFilter=allActiveWorkers) WHERE managementLevel_PrimaryPosition is not empty AND (fullName CONTAINS peric OR employeeID CONTAINS peric OR cf_ZCF_ToText_Worker_GlobalIDValue CONTAINS peric)",
      "name": "workerSearchFullName",
      "url": "<% 'https://api.workday.com/common/v1/workers?search='+ instanceListQuery%>",
      "exclude": "<% empty instanceListQuery %>",
      "authType": "sso",
      "deferred": true
    },
    {
      "name": "getPositions",
      "baseUrlType": "workday",
      "url": "<% getPositionsQuery(workerID) %>",
      "exclude": "<% empty instanceListQuery %>",
      "authType": "sso",
      "deferred": "true"
    }
  ],
  "outboundData": {
    "outboundEndPoints": [
      {
        "name": "securityRequest",
        "baseUrlType": "app",
        "url": "securityRequests",
        "httpMethod": "POST",
        "authType": "sso",
        "onSend": "<% console.info(json:asJSON(self.data)); return self.data; %>",
        "values": [
          {
            "outboundPath": "fromWorker.id",
            "value": "<% fromWorker.value[0] %>"
          },
          {
            "outboundPath": "fromPosition.id",
            "value": "<% fromPosition.value[0] %>"
          },
          {
            "outboundPath": "effectiveDate",
            "value": "<% effectiveDate.value %>"
          },
          {
            "outboundPath": "justificationText",
            "value": "<% justificationText.value %>"
          }
        ]
      },
      {
        "name": "sRTarget",
        "baseUrlType": "app",
        "url": "sRTargets",
        "httpMethod": "POST",
        "authType": "sso",
        "onSend": "<% console.info(json:asJSON(self.data)); return self.data; %>",
        "values": [
          {
            "outboundPath": "toWorker.id",
            "value": "<% toWorker.value[0] %>"
          },
          {
            "outboundPath": "toPosition.id",
            "value": "<% toPosition.value[0] %>"
          },
          {
            "outboundPath": "referenceToSecurityRequest.id",
            "value": "<% securityRequest.id %>"
          }
        ]
      },
      {
        "name": "createSecurityRequestEvent",
        "baseUrlType": "app",
        "url": "createSecurityRequestEvents",
        "httpMethod": "POST",
        "authType": "sso",
        "onSend": "<% console.info(json:asJSON(self.data));
        return self.data; %>",
        "values": [
          {
            "outboundPath": "businessProcessTarget.id",
            "value": "<% securityRequest.id %>"
          }
        ]
      },
      {
        "values": [
          {
            "outboundPath": "submitted",
            "value": true
          },
          {
            "outboundPath": "securityRequestID",
            "value": "<% securityRequest.id %>"
          },
          {
            "outboundPath": "sRTargetID",
            "value": "<% sRTarget.id %>"
          }
        ],
        "name": "transitionOutboundVars",
        "type": "outboundVariable",
        "variableScope": "flow",
        "_comment": "variable outbound que existe durante el flow, y que tiene valor true tras el primer submit, para mostrar así el popup de submit exitoso"
      }
    ]
  },
  "script": "<%
             var getPositionsQuery = function(searchID) {
                 var workerID = searchID;
                 return 'https://api.workday.com/wql/v1/data?query=' + string:urlEncode('SELECT allPositionsJobs FROM workersForHCMReporting(dataSourceFilter=allActiveWorkers) WHERE workdayID=\\''+ workerID + '\\' AND allPositionsJobs is not empty AND managementLevel_PrimaryPosition is not empty');
             };%>",
  "presentation": {
    "applicationExceptions": [
      {
        "type": "applicationException",
        "message": "ToPosition can't be the same from FromPosition. Please, choose another.",
        "severity": "ERROR",
        "render": "<%  %>"
      }
    ],
    "headerSize": "VPS_DEFAULT",
    "pageType": "edit",
    "title": {
      "type": "title",
      "label": "Create New Security Request",
      "enabled": true
    },
    "body": {
      "type": "fieldSet",
      "horizontal": false,
      "children": [
        {
          "type": "congratulationsPopup",
          "id": "congratsPopUp",
          "textCongrats": "Submission completed!",
          "textSubmitted": "",
          "render": "<% flowVariables.submitted ?? false %>",
          "_comment": "popup que informa de que el submit de la security request ha sido exitosa. Solo se muestra tras el submit"
        },
        {
          "type": "text",
          "id": "instructionsText",
          "Label": "",
          "value": "This page is used to submit Workday security requests (Production only). The design has been made as simple as possible and simply copies all the user- and role-based security roles from a source worker to a target worker, removing any existing roles assigned to the target worker in the process. Simply enter the source and target (and positions if there are > 1), the Effective Date for the changes, and click 'Submit'. The tool will do the rest.
To check what roles a proposed source worker has been assigned, please check the security reports for that worker.
Please note that security requests for non-Production Workday tenants and/or other GHR applications (such as Dovetail, Sharepoint etc.) are not in scope for this service.",
          "enabled": "false"
        },
        {
          "type": "instanceList",
          "id": "fromWorker",
          "label": "Select a worker to copy the security from:",
          "required": true,
          "multiSelect": "false",
          "values": "<% [] %>",
          "searchEndPoint": "<% endpoints.workerSearchFullName %>",
          "searchResultValues": "<% var namesList = [];
          for (var Worker : workerSearchFullName.data){
              namesList.add({'wid':Worker.id,'id':Worker.id,'descriptor': Worker.descriptor, 'name': Worker.descriptor});

          }
          return namesList;%>",
          "onChange": "<%
                       /* Se comprueba si el popup es accesible, y de ser el caso,
                        se pone el visible a false para evitar que se vuelva a mostrar al seleccionar los workers*/
                       if(!empty congratsPopUp){
                           congratsPopUp.visible=false;
                       }


                       if (!empty fromWorker.value == true) {
                           fromPosition.visible = true;
                               effectiveDate.visible = true;
                               effectiveUntil.visible = false;
                               justificationText.visible = true;
                               toWorker.visible= true;

                               var getIDFromSearch = fromWorker.value[0];
                               var positionsData = getPositions.invoke({'workerID': getIDFromSearch});
                               var allPositionsForWorker = positionsData.data[0].allPositionsJobs;

                               if(allPositionsForWorker.size() >= 1) {
                                   var arrayOfIdsPosition = [];
                                       arrayOfIdsPosition.add(allPositionsForWorker[0].id);
                                       fromPosition.setValues(allPositionsForWorker);
                                       fromPosition.setValue(arrayOfIdsPosition);
                               }

                       } else {
                           fromPosition.visible = false;
                               effectiveDate.visible = false;
                               effectiveUntil.visible = false;
                               justificationText.visible = false;
                               toWorker.setValue([]);
                               toPosition.setValue([]);
                               toWorker.visible = false;
                               toPosition.visible = false;
                       }%>"
        },
        {
          "type": "instanceList",
          "id": "fromPosition",
          "label": "Choose a position to mirror the security groups:",
          "values": "<%var list = []%>",
          "required": true,
          "visible": false
        },
        {
          "type": "instanceList",
          "id": "toWorker",
          "label": "Choose the target worker:",
          "required": true,
          "displayKey": "name",
          "searchEndPoint": "<% endpoints.workerSearchFullName %>",
          "searchResultValues": "<% var namesList = [];
          for (var Worker : workerSearchFullName.data){
              if(!empty Worker.globalid){
                  namesList.add({'id':Worker.id,'descriptor': Worker.descriptor, 'name': Worker.descriptor + ' (' + Worker.globalid.descriptor + ')', 'positions': Worker.positions,'managementLevel':Worker.managementLevel_PrimaryPosition});
              }else{
                  namesList.add({'id':Worker.id,'descriptor': Worker.descriptor, 'name': Worker.descriptor});

              }

          }
          return namesList; %>",
          "visible": false,
          "values": "<% [] %>",
          "onChange": "<%
                       if (!empty toWorker.value == true) {
                           toPosition.visible = true;
                               var getIDFromSearch = toWorker.value[0];
                               var positionsData = getPositions.invoke({'workerID': getIDFromSearch});
                               var allPositionsForWorker = positionsData.data[0].allPositionsJobs;

                               if(allPositionsForWorker.size() >= 1) {
                                   var arrayOfIdsPosition = [];
                                       arrayOfIdsPosition.add(allPositionsForWorker[0].id);
                                       toPosition.setValues(allPositionsForWorker);
                                       toPosition.setValue(arrayOfIdsPosition);
                                       toPosition.clearError();
                               }
                       } else {
                           toPosition.visible = false;
                               toPosition.clearError();
                       }%>"
        },
        {
          "type": "instanceList",
          "id": "toPosition",
          "label": "Choose a position to receive the new security groups:",
          "values": "<% var list = []; %>",
          "required": true,
          "visible": false
        },
        {
          "type": "date",
          "id": "effectiveDate",
          "label": "Effective Date",
          "required": true,
          "visible": false
        },
        {
          "type": "date",
          "id": "effectiveUntil",
          "label": "Effective Until",
          "required": false,
          "visible": false
        },
        {
          "type": "textArea",
          "id": "justificationText",
          "label": "Justification Text",
          "required": false,
          "visible": false
        },
        {
          "type": "editButtonBar",
          "editButtons": [
            {
              "type": "editButton",
              "label": "Submit",
              "id": "submit",
              "buttonType": "PRIMARY"
            }
          ]
        }
      ]
    },
    "footer": {
      "type": "footer",
      "children": [ ]
    },
    "onSubmit": "<% if(fromPosition.value == toPosition.value) {
        toPosition.setError('ToPosition can not be the same as From Position. Please, choose another.');
    }else{
        toPosition.clearError();
    } %>"
  }
}
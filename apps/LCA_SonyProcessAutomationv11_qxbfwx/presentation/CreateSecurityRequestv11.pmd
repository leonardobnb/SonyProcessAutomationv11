{
  "id": "CreateSecurityRequestv11",
  "endPoints": [
    {
      "name": "getAllWorkersWithPositions",
      "url": "https://api.workday.com/wql/v1/data?query=SELECT%20fullName%20AS%20descriptor%2C%20workdayID%20AS%20id%2C%20positionsForWorker%20AS%20positions%2C%20managementLevel%20FROM%20allWorkers%20WHERE%20positionsForWorker%20is%20not%20empty%20AND%20managementLevel%20is%20not%20empty",
      "authType": "sso"
    },
    {
      "name": "getUniquePosition",
      "baseUrlType": "workday",
      "url": "<% getUniquePositionQuery(fullName) %>",
      "exclude": "<% empty instanceListQuery %>",
      "authType": "sso",
      "deferred": "true"
    },
    {
      "name": "getPositions",
      "baseUrlType": "workday",
      "url": "<% getPositionsQuery(fullName) %>",
      "exclude": "<% empty instanceListQuery %>",
      "authType": "sso",
      "deferred": "true"
    },
    {
      "name": "getAssignableRolesForPosition",
      "baseUrlType": "workday",
      "url": "<% getAssignableRolesForPositionQuery(positionId) %>",
      "authType": "sso",
      "deferred": "true"
    }
  ],
  "outboundData": {
    "outboundEndPoints": [
      {

        "name": "securityRequestv11",
        "baseUrlType": "app",
        "url": "securityRequestv11s",
        "httpMethod": "POST",
        "authType": "sso",
        "onSend": "<% console.info(json:asJSON(self.data)); return self.data; %>",
        "values": [
          {
            "outboundPath": "fromWorker.id",
            "value": "<% fromWorker.value[0] %>"
          },
          {
            "outboundPath": "fromPosition.id",
            "value": "<% fromPosition.value[0] %>"
          },
          {
            "outboundPath": "effectiveDate",
            "value": "<% effectiveDate.value %>"
          },
          {
            "outboundPath": "effectiveUntil",
            "value": "<% effectiveUntil.value %>"
          },
          {
            "outboundPath": "justificationText",
            "value": "<% justificationText.value %>"
          }
        ]
      },
      {

        "name": "sRTargetv11",
        "baseUrlType": "app",
        "url": "sRTargetv11s",
        "httpMethod": "POST",
        "authType": "sso",
        "onSend": "<% console.info(json:asJSON(self.data)); return self.data; %>",
        "values": [
          {
            "outboundPath": "toWorker.id",
            "value": "<% toWorker.value[0] %>"
          },
          {
            "outboundPath": "toPosition.id",
            "value": "<% toPosition.value[0] %>"
          },
          {
            "outboundPath": "referenceToSecurityRequestv11.id",
            "value": "<% securityRequestv11.id %>"
          }
        ]
      },
      {

        "name": "sRAssignableRolesFromPositionv11",
        "baseUrlType": "app",
        "url": "sRAssignableRolesFromPositionv11s",
        "httpMethod": "POST",
        "authType": "sso",
        "onSend": "<% console.info(json:asJSON(self.data)); return self.data; %>",
        "values": [
          {
            "outboundPath": "referenceToSecurityRequestv11.id",
            "value": "<% securityRequestv11.id %>"
          }
        ]
      },
      {
        "name": "createSecurityRequestv11Event",
        "baseUrlType": "app",
        "url": "createSecurityRequestv11Events",
        "httpMethod": "POST",
        "authType": "sso",
        "onSend": "<% console.info(json:asJSON(self.data));
                   return self.data; %>",
        "values": [
          {
            "outboundPath": "businessProcessTarget.id",
            "value": "<% securityRequestv11.id %>"
          }
        ]
      }
    ]
  },
  "script": "<%

             var getPositionsQuery = function(searchTXT){

      var fullName = searchTXT;
      return 'https://api.workday.com/wql/v1/data?query=' + string:urlEncode('SELECT positionsForWorker, managementLevel FROM allWorkers WHERE fullName=\\''+ fullName + '\\' AND positionsForWorker is not empty AND managementLevel is not empty');

  };

             var getUniquePositionQuery = function(searchTXT){
                 var fullName = searchTXT;
                 return 'https://api.workday.com/wql/v1/data?query=' + string:urlEncode('SELECT position FROM allWorkers WHERE fullName=\\''+ fullName + '\\' AND position is not empty')
             }



             var moreThanOnePosition = function(workerName) {
                 var positionsData = getPositions.invoke({'fullName': workerName});
                 var listSize = positionsData.data[0].positionsForWorker;
                 if(listSize.size() > 1) {
                     return true
                 } else {
                     return false
                 }
             };


  var getAssignableRolesForPositionQuery = function(positionId){
  return 'https://api.workday.com/wql/v1/data?query=' + string:urlEncode('SELECT myAssignableRoles FROM allWorkers WHERE positionsForWorker=\\''+ positionId + '\\'')
  }


             %>",
  "presentation": {
    "applicationExceptions": [
      {
        "type": "applicationException",
        "message": "ToPosition can't be the same from FromPosition. Please, choose another.",
        "severity": "ERROR",
        "render": "<%  %>"
      }
    ],
    "headerSize": "VPS_DEFAULT",
    "pageType": "edit",
    "title": {
      "type": "title",
      "label": "Create New Security Request",
      "enabled": true
    },
    "body": {
      "type": "fieldSet",
      "horizontal": false,
      "children": [
        {
          "type": "instanceList",
          "id": "fromWorker",
          "label": "Search a worker to copy the security groups from:",
          "required": true,
          "values": "<% getAllWorkersWithPositions.data %>",
          "onChange": "<% if (!empty fromWorker.value == true) {

              fromPosition.visible = true;
                  effectiveDate.visible = true;
                  effectiveUntil.visible = true;
                  justificationText.visible = true;
                  toWorker.visible= true;


          var getNameFromSearch = fromWorker.selectedEntries[0].descriptor;

              if(moreThanOnePosition(getNameFromSearch) == false) {


                  var positionsData = getPositions.invoke({'fullName': getNameFromSearch});
                      var allPositionsForWorker = positionsData.data[0].positionsForWorker;
                      var arrayOfIdsPosition = [];
                      arrayOfIdsPosition.add(allPositionsForWorker[0].id);
                      fromPosition.setValues(allPositionsForWorker);
                      fromPosition.setValue(arrayOfIdsPosition);

                  var assignableRoles = getAssignableRolesForPosition.invoke({'positionId': fromPosition.value[0]});
                      if(!empty assignableRoles.data) {
                          var allAssignableRolesForWorker = assignableRoles.data[0].myAssignableRoles;
                              fromAssignableRolesForPositionNameGrid.setRows(allAssignableRolesForWorker);

                              fromAssignableRolesForPositionNameGrid.visible = false; //set to true to show the grid on page
                      }


                  var positionData = getUniquePosition.invoke({'fullName': getNameFromSearch});
                  var positionUnique = positionData.data[0].position;
                      var arrayOfIdAndDescriptorUniquePosition = [];
                      arrayOfIdAndDescriptorUniquePosition.add(positionUnique);
                  var arrayOfIdUniquePosition = [];
                      arrayOfIdUniquePosition.add(positionUnique.id);
                      testepegarsouma.setValues(arrayOfIdAndDescriptorUniquePosition);
                      testepegarsouma.setValue(arrayOfIdUniquePosition);
                  testepegarsouma.visible = true;



              } else {
                  var positionsData = getPositions.invoke({'fullName': getNameFromSearch});
                      var allPositionsForWorker = positionsData.data[0].positionsForWorker;
                      var arrayOfIdsPosition = [];
                      arrayOfIdsPosition.add(allPositionsForWorker[0].id);
                  fromPosition.setValues(allPositionsForWorker);
                  fromPosition.setValue(arrayOfIdsPosition);



                      var assignableRoles = getAssignableRolesForPosition.invoke({'positionId': fromPosition.value});
                      if (!empty assignableRoles.data) {
                          var allAssignableRolesForWorker = assignableRoles.data[0].myAssignableRoles;
                              fromAssignableRolesForPositionNameGrid.setRows(allAssignableRolesForWorker);

                              fromAssignableRolesForPositionNameGrid.visible = false; //set to true to show the grid on page
                      }


              }
          } else {
          fromPosition.visible = false;
              effectiveDate.visible = false;
              effectiveUntil.visible = false;
              justificationText.visible = false;
              toWorker.setValue([]);
              toPosition.setValue([]);
              toWorker.visible = false;
              toPosition.visible = false;
              fromAssignableRolesForPositionNameGrid.setRows([]);
              fromAssignableRolesForPositionNameGrid.visible = false;
          } %>"
        },
        {
          "type": "instanceList",
          "id": "fromPosition",
          "label": "Choose a position to mirror the security groups:",
          "values": "<%var list = []%>",
          "required": true,
          "visible": false
        },
        {
          "type": "instanceList",
          "id": "toWorker",
          "label": "Choose the target worker:",
          "required": true,
          "visible": false,
          "values": "<% getAllWorkersWithPositions.data %>",
          "onChange": "<% if (!empty toWorker.value == true) {
              toPosition.visible = true;
          var getNameFromSearch = toWorker.selectedEntries[0].descriptor;

              if(moreThanOnePosition(getNameFromSearch) == false) {
                  var positionsData = getPositions.invoke({'fullName': getNameFromSearch});
                      var allPositionsForWorker = positionsData.data[0].positionsForWorker;
                      var arrayOfIdsPosition = [];
                      arrayOfIdsPosition.add(allPositionsForWorker[0].id);
                      toPosition.setValues(allPositionsForWorker);
                      toPosition.setValue(arrayOfIdsPosition);
                  toPosition.clearError();

              } else {
                  var positionsData = getPositions.invoke({'fullName': getNameFromSearch});
                      var allPositionsForWorker = positionsData.data[0].positionsForWorker;

                      var arrayOfIdsPosition = [];
                      arrayOfIdsPosition.add(allPositionsForWorker[0].id);
                      toPosition.setValues(allPositionsForWorker);
                      toPosition.setValue(arrayOfIdsPosition);
                      toPosition.clearError();

              }
          } else {
          toPosition.visible = false;
              toPosition.clearError();
          } %>"
        },
        {
          "type": "instanceList",
          "id": "toPosition",
          "label": "Choose a position to receive the new security groups:",
          "values": "<% var list = []; %>",
          "required": true,
          "visible": false
        },
        {
          "type": "date",
          "id": "effectiveDate",
          "label": "Effective Date",
          "required": true,
          "visible": false
        },
        {
          "type": "date",
          "id": "effectiveUntil",
          "label": "Effective Until",
          "required": false,
          "visible": false
        },
        {
          "type": "textArea",
          "id": "justificationText",
          "label": "Justification Text",
          "required": false,
          "visible": false
        },
        {
          "type": "grid",
          "id": "fromAssignableRolesForPositionNameGrid",
          "label": "Assignable Roles for Position Selected",
          "rows": "<% var list = []; %>",
          "rowVariableName": "fromAssignableRolesForPosition",
          "visible": false,
          "columns": [
            {
              "cellTemplate": {
                "type": "text",
                "value": "<% fromAssignableRolesForPosition.descriptor %>",
                "valueOutBinding": "sRAssignableRolesFromPositionv11.fromAssignableRolesForPositionName"

              },
              "id": "fromAssignableRolesForPosition.descriptor",
              "label": "From Assignable Roles For Position Name",
              "columnId": "fromAssignableRolesForPositioName",
              "type": "column"
            },
            {
              "cellTemplate": {
                "type": "text",
                "value": "<% fromAssignableRolesForPosition.id %>",
                "valueOutBinding": "sRAssignableRolesFromPositionv11.fromAssignableRolesForPositionId"
              },
              "id": "fromAssignableRolesForPosition.id",
              "label": "From Assignable Roles For Position Id",
              "columnId": "fromAssignableRolesForPosition",
              "type": "column"
            }
          ]
        },
        {
          "type": "instanceList",
          "id": "testepegarsouma",
          "label": "pegar só uma posição",
          "values": "<% var list = []; %>",
          "visible": false
        },
        {
          "type": "editButtonBar",
          "editButtons": [
            {
              "type": "editButton",
              "label": "Submit",
              "id": "submit",
              "buttonType": "PRIMARY"
            }
          ]
        }
      ]
    },
    "footer": {
      "type": "footer",
      "children": [
        {
          "type": "richText",
          "enabled": "false",
          "value": "Sony Process Automation v1.1"
        }
      ]
    }
  },
  "onSubmit": "<% if(fromPosition.value == toPosition.value) {
      toPosition.setError('ToPosition can not be the same as From Position. Please, choose another.');
  }else{
  toPosition.clearError();
  } %>"
}